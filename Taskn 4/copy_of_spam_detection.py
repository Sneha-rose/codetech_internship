# -*- coding: utf-8 -*-
"""Copy of Spame detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HKcNmDF3aP88a20PYano4AgGe3z1xNHi
"""

# Spam Email Detection using Naive Bayes and Scikit-learn

# Step 1: Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load Dataset
# Download dataset from: https://archive.ics.uci.edu/ml/datasets/sms+spam+collection
!wget -O spam.zip https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip
!unzip -o spam.zip
df = pd.read_csv('SMSSpamCollection', sep='\t', encoding='latin-1', header=None, names=['label', 'message'])


# Step 3: Data Preprocessing
# Map 'ham' to 0 and 'spam' to 1
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Show data sample
print("Sample Data:")
display(df.head())

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    df['message'], df['label'], test_size=0.2, random_state=42)

print(f"Training samples: {len(X_train)}, Testing samples: {len(X_test)}")

# Step 5: Feature Extraction using TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

print(f"Number of features: {X_train_tfidf.shape[1]}")

# Step 6: Train Naive Bayes Classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Step 7: Evaluate the model
y_pred = model.predict(X_test_tfidf)

accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy: {accuracy:.4f}")

cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Step 8: Plot Confusion Matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Step 9: Predict on new samples
samples = [
    "Congratulations! You've won a $1000 Walmart gift card. Click here to claim now.",
    "Hey, are we still meeting for lunch today?",
    "You have been selected for a chance to get a free iPhone. Call now!"
]

samples_tfidf = vectorizer.transform(samples)
predictions = model.predict(samples_tfidf)

for msg, pred in zip(samples, predictions):
    print(f"\nMessage: {msg}\nPrediction: {'Spam' if pred == 1 else 'Not Spam'}")